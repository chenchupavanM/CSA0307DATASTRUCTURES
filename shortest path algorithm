#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 100
#define INF 1000000

int graph[MAX_VERTICES][MAX_VERTICES];
int dist[MAX_VERTICES];
int visited[MAX_VERTICES];
int vertex_count;

void dijkstra(int start) {
    int i, u, v, weight;
    for (i = 0; i < vertex_count; i++) {
        dist[i] = INF;
        visited[i] = 0;
    }
    dist[start] = 0;
    for (i = 0; i < vertex_count; i++) {
        u = min_distance(dist, visited);
        visited[u] = 1;
        for (v = 0; v < vertex_count; v++) {
            weight = graph[u][v];
            if (!visited[v] && weight && dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight;
            }
        }
    }
}

int min_distance(int dist[], int visited[]) {
    int i, min_vertex, min_value = INF;
    for (i = 0; i < vertex_count; i++) {
        if (visited[i] == 0 && dist[i] <= min_value) {
            min_value = dist[i];
            min_vertex = i;
        }
    }
    return min_vertex;
}

int main() {
    int i, j, start_vertex;
    printf("Enter number of vertices: ");
    scanf("%d", &vertex_count);
    printf("Enter weighted adjacency matrix:\n");
    for (i = 0; i < vertex_count; i++) {
        for (j = 0; j < vertex_count; j++) {
            scanf("%d", &graph[i][j]);
        }
    }
    printf("Enter starting vertex: ");
    scanf("%d", &start_vertex);
    dijkstra(start_vertex);
    printf("Shortest distances:\n");
    for (i = 0; i < vertex_count; i++) {
        printf("%d\t%d\n", i, dist[i]);
    }
    return 0;
}
