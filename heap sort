#include <stdio.h>

// A utility function to swap two elements
void swap(int* a, int* b) {
  int t = *a;
  *a = *b;
  *b = t;
}

// A function to heapify the tree rooted with node i which is
// an index in arr[]. n is size of heap
void heapify(int arr[], int n, int i) {
  int largest = i;  // Initialize largest as root
  int l = 2*i + 1;  // left = 2*i + 1
  int r = 2*i + 2;  // right = 2*i + 2

  // If left child is larger than root
  if (l < n && arr[l] > arr[largest])
    largest = l;

  // If right child is larger than largest so far
  if (r < n && arr[r] > arr[largest])
    largest = r;

  // If largest is not root
  if (largest != i) {
    swap(&arr[i], &arr[largest]);

    // Recursively heapify the affected sub-tree
    heapify(arr, n, largest);
  }
}

// main function to do heap sort
void heap_sort(int arr[], int n) {
  // Build heap (rearrange array)
  for (int i = n / 2 - 1; i >= 0; i--)
    heapify(arr, n, i);

  // One by one extract an element from heap
  for (int i = n-1; i >= 0; i--) {
    // Move current root to end
    swap(&arr[0], &arr[i]);

    // call max heapify on the reduced heap
    heapify(arr, i, 0);
  }
}

int main() {
  int arr[] = {64, 25, 12, 22, 11};
  int n = sizeof(arr)/sizeof(arr[0]);
  
  printf("Before sorting: \n");
  for (int i = 0; i < n; i++) {
    printf("%d ", arr[i]);
  }
  printf("\n");
  
  heap_sort(arr, n);
  
  printf("After sorting: \n");
  for (int i = 0; i < n; i++) {
    printf("%d ", arr[i]);
  }
  
  return 0;
}
